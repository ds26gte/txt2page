# last modified 2014-11-26
# ds26gte@yahoo.com

opts=""
while test $# -ne 0
do
  case $1 in
  -r) opts="$opts $1 $2"; shift 2;;
  -*) opts="$opts $1"; shift;;
  *) break;;
  esac
done

f=$1

if test $# -gt 1
then
  f=txt2pageout.tmp
  cat "$@" > $f
fi

g=${f##*/}

ext=${g##*.}
test "$ext" = "$g" && ext=""

g=${g%.*}

loadtmac=1

if test -f $g.tmac
then tmacf=$g.tmac
elif test -f txt2page.tmac
then tmacf=txt2page.tmac
elif test -f default.tmac
then tmacf=default.tmac
else loadtmac=0
fi

h=$g.txt.so

soelim $f > $h

ex $h <<EOF

func! TroffRecognizeURLs()
    " evalwhen.com
    " -- check not preceded by @
    s#\%(@\)\@<!\<[[:alnum:].-]\+\.\%(com\|co\.[[:lower:]]\{2}\|edu\|net\|org\|se\)\>#FAKEHTTP://&#g

    " URL
    s#\<[[:alpha:]-]\+://[^[:space:]()<>\[\]]\+\%(([[:alnum:]]\+)\|/\|[^[:space:][:punct:]]\)#ÞtzpURLbeginTzp&ÞtzpURLendTzp#g

    s#FAKEHTTP://##g

    " ./pathname
    s#\%([.]\)\@<!\./\([^[:space:]()<>&]\+\)\%([[:punct:]]\)\@<!#ÞtzpURLbeginTzp\1ÞtzpURLendTzp#g

endfunc

func! TroffFindURLfootnotes()
  v/^ÞtzpPreformattedTzp/ s/:ÞtzpURLbeginTzp.\{-}ÞtzpURLendTzp//g
endfunc

func! TroffFindURLHs()
    " a line that starts with ÞtzpURLbeginTzp is a possible urlh
    %s/^ÞtzpURLbeginTzp/ÞtzpPossibleURLHtzp&/

    g/^ÞtzpPossibleURLHtzp/ -1s/⋆\$/&ÞtzpURLHcontinuationLineTzp/

    %s/^ÞtzpPossibleURLHtzp//

    g/ÞtzpURLHcontinuationLineTzp\$/ .,+1 j

    %s/ÞtzpURLHcontinuationLineTzp//

    " ***

    v/^ÞtzpPreformattedTzp/ s/^[^⋆]\+⋆\s\+ÞtzpURLbeginTzp/ÞtzpPossibleURLHtzp&/

    g/^ÞtzpPossibleURLHtzp/ -1s/⋆[^⋆]\+\$/&ÞtzpURLHcontinuationLineTzp/

    %s/^ÞtzpPossibleURLHtzp//

    g/ÞtzpURLHcontinuationLineTzp\$/ .,+1 j

    %s/ÞtzpURLHcontinuationLineTzp//

    " ***

    v/^ÞtzpPreformattedTzp/ s/^[^\[]\+\](ÞtzpURLbeginTzp/ÞtzpPossibleURLHtzp&/

    g/^ÞtzpPossibleURLHtzp/ -1s/\[[^\]]\{-}\$/&ÞtzpURLHcontinuationLineTzp/

    %s/^ÞtzpPossibleURLHtzp//

    g/ÞtzpURLHcontinuationLineTzp\$/ .,+1 j

    %s/ÞtzpURLHcontinuationLineTzp//

    " ***

    v/^ÞtzpPreformattedTzp/ s:⋆\([^⋆]\+\)⋆\s\+ÞtzpURLbeginTzp.\{-}ÞtzpURLendTzp:\1:g

    v/^ÞtzpPreformattedTzp/ s:\[\([^\]]\+\)\](ÞtzpURLbeginTzp.\{-}ÞtzpURLendTzp:\1:g

    " rm Url markers
    v/^ÞtzpPreformattedTzp/ s:ÞtzpURLbeginTzp\(.\{-}\)ÞtzpURLendTzp:\1:g
endfunc

func! TroffPalatable()
    s:\(.\)†\(\S\+\%([:punct:]\)\@<!\):\1\\\\*{\2\\\\*}:g

    s:\`\`\(.\{-1,}\)\`\`:\\\\fC\1\\\\fP:g

    s:\`\([^\`]\{-1,}\)\`:\\\\fC\1\\\\fP:g

    s:^\.[/]:\\\\\&\0:
endfunc

func! TroffTables()
    g/^|\s/,/^[^|]/-1 s#|\s*\$##

    g/^|\s/,/^[^|]/-1 s#^|\s# ÞtzpTableLineTzp#

    g/^ ÞtzpTableLineTzp/,/^\%(\$\|[^ ]\)/-1 j

    v/ÞtzpPreformattedTzp/ s/ \(ÞtzpTableLineTzp\)/\1/g

    %s#^ÞtzpTableLineTzp.*\$#.TS\rtab(|),center,allbox;\rÞtzpTableFirstLineTzp&\r.TE#

    %s#^\(ÞtzpTableFirstLineTzp\)ÞtzpTableLineTzp#\1#

    v/ÞtzpPreformattedTzp/ s#ÞtzpTableLineTzp#\r#g

    %s#^ÞtzpTableFirstLineTzp\(.*\)#ÞtzpTablePreamble\1ÞtzpTableSpaceTzp.\r\1#

    g/^ÞtzpTablePreamble/ s/|/ÞtzpTableSpaceTzp/g

    g/ÞtzpTableSpaceTzp/ s/.\{-}\(ÞtzpTableSpaceTzp\)/c\1/g

    v/ÞtzpPreformattedTzp/ s/ÞtzpTableSpaceTzp/ /g

endfunc

func! Toggle01(...)
  if a:0
    let b:toggle01Value = 1
  else
    let b:toggle01Value = !b:toggle01Value
    return b:toggle01Value
  endif
endfunc

func! Txt2pdf()

%s/Þ/ÞtzpThornTzp/g

%s/\s\+\$//

\$a
ÞtzpBogusEndOfFileLineTzp
.

"code display

%s/^\s*\`\`\`.\+\$/\`\`\`/

call Toggle01(0)
g/^\s*\`\`\`\$/ s/\$/\=Toggle01()

g/^\s*\`\`\`0\$/+1,/^\s*\`\`\`1\$/-1 s/^/ÞtzpPreformattedTzp/

%s/^\s*\`\`\`0\$/ÞtzpCodeDisplayStartTzp/

%s/^\s*\`\`\`1\$/ÞtzpCodeDisplayEndTzp/

g/^ÞtzpCodeDisplayEndTzp\$/,/./-1 j!

%s/^ÞtzpCodeDisplayStartTzp\$/.LP\r.nf\r.ft C\r.KS/

%s/^ÞtzpCodeDisplayEndTzp\$/.KE\r.fi\r.LP/

"obeylines

0
let lastline = line('$')
while 1
  let currline = line('.')
  if currline == 1 && match(getline('.'), '^\s') > -1
    let m = 1
  else
    let m = search('^\s')
  endif
  if m == 0
    break
  endif
  s/\$/ÞtzpLeadingSpacesStartLineTzp/
  while 1
    if match(getline('.'), '^\$') > -1
      s/^\$/.fi\r.LP/
      break
    endif
    s/^\S/ÞtzpVerbatimContinuationTzp&/
    s/^ //
    s/^/ÞtzpLeadingSpacesLineTzp/
    if line('.') == lastline
      break
    endif
    norm j
  endwhile
  g/ÞtzpLeadingSpacesStartLineTzp/ s/^/.LP\r.nf\r/

  %s/ÞtzpLeadingSpacesStartLineTzp//

  while 1
    let m = search('^ÞtzpLeadingSpacesLineTzpÞtzpVerbatimContinuationTzp')
    if m == 0
      break
    endif
    s/^ÞtzpLeadingSpacesLineTzpÞtzpVerbatimContinuationTzp//
    norm k
    .,+1 j
  endwhile

endwhile

%s/^ÞtzpLeadingSpacesLineTzp//

"comment

g/^\.\s*\\\"/d

"horiz bars

%s/^\s*-\{5,}\$//

"%s:\\\\":ÞtzpBackslashTzpÞtzpDoubleQuoteTzp:g

"sections

%s/^#\s\+\(.\{-}\)\s\+#\$/ÞtzpSectionTzp title \1/
%s/^#\s\+\(.\{-}\)\s\+##\$/ÞtzpSectionTzp htmltitle \1/
%s/^###\s\+###\$/ÞtzpSectionTzp dropcap x/

%s/^#\s\+\(.\{-}\)\s*#*\$/ÞtzpSectionTzp 1 \1/
%s/^##\s\+\(.\{-}\)\s*#*\$/ÞtzpSectionTzp 2 \1/
%s/^###\s\+\(.\{-}\)\s*#*\$/ÞtzpSectionTzp 3 \1/
%s/^####\s\+\(.\{-}\)\s*#*\$/ÞtzpSectionTzp 4 \1/
%s/^#####\s\+\(.\{-}\)\s*#*\$/ÞtzpSectionTzp 5 \1/
%s/^######\s\+\(.\{-}\)\s*#*\$/ÞtzpSectionTzp 6 \1/

g/^ÞtzpSectionTzp/,/./-1 j!

g/^ÞtzpSectionTzp\s\+htmltitle\s/d

"section break

%s/^[^[:alnum:]]\+\$/ÞtzpSectionTzp break &/

g/^ÞtzpSectionTzp\s\+break\s/-1 s/^\$/ÞtzpSectionTzp blankabovebreak x/
g/^ÞtzpSectionTzp\s\+break\s/+1 s/^\$/ÞtzpSectionTzp blankbelowbreak x/

g/^ÞtzpSectionTzp\s\+blankabovebreak\s/+1 s/ÞtzpSectionTzp\s\+break\s/ÞtzpSectionTzp breakbelowblank /

g/^ÞtzpSectionTzp\s\+blankabovebreak\s/d

"%s/^ÞtzpSectionTzp\s\+blankabovebreak\s.*//

%s/^ÞtzpSectionTzp\s\+break\s//

g/^ÞtzpSectionTzp\s\+blankbelowbreak\s/-1 s/ÞtzpSectionTzp\s\+breakbelowblank\s/ÞtzpSectionTzp breakbetweenblanks /

%s/^ÞtzpSectionTzp\s\+blankbelowbreak\s.*//

%s/^ÞtzpSectionTzp\s\+breakbelowblank\s//

g/^ÞtzpSectionTzp\s\+breakbetweenblanks\s/,/./-1 j!

%s/^ÞtzpSectionTzp\s\+breakbetweenblanks\s\+\(.*\)\$/.SECBREAK \1/

"

%s/^ÞtzpSectionTzp\s\+title\s\+\(.*\)\$/.TITLE \1/

%s/^ÞtzpSectionTzp\s\+\([1-6]\)\s\+\(.*\)\$/.SEC \1 \2/

"drop cap

%s/^ÞtzpSectionTzp\s\+dropcap\s\+.*/ÞtzpDropCapTzp/

g/^ÞtzpDropCapTzp\$/ , /./ j

%s/^ÞtzpDropCapTzp\s*\(.\{-}[[:alnum:]]\)\(\S*\)\s*/.if !d DC .mso dc.tmac\r.DC \1 \2\r/

"

v/^ÞtzpPreformattedTzp/ s:\\\\:ÞtzpBackslashTzpÞtzpBackslashTzp:g

"

v/^ÞtzpPreformattedTzp/ s:\(.\)\(‡\)\s*\$:\1\r\2:

%s/^\(†\s*\S\+\)\s\+\(\S\)/\1\r\2/

%s/^†\s*\(\S.*\)\?\s*\$/.FS \1/

%s/^‡\$/.FE/

%s:^†††\s\+\(.*\)\$:.LP\r[\1]\r.br:

g/^††/d

"bullet items

g/^•\s\+.*/ -1s/^\$/ÞtzpDeleteBlankLineTzp/

g/^ÞtzpDeleteBlankLineTzp\$/d

%s/^•\s\+\(.*\)/.IP • 2\r.nr nextGrafWithoutIndent 1\r\1/

"

g/^ÞtzpPreformattedTzp/ s:\\\\:ÞtzpBackslashETzp:g

v/^ÞtzpPreformattedTzp/ call TroffRecognizeURLs()

call TroffTables()

call TroffFindURLfootnotes()

call TroffFindURLHs()

v/^ÞtzpPreformattedTzp/ call TroffPalatable()

%s:ÞtzpBackslashTzp:\\\\:g

%s:ÞtzpBackslashETzp:\\e:g

%s:ÞtzpDoubleQuoteTzp:":g

"

%s/^\$/.grafSeparatorLine/

g/^\.LP\$/-1 s/^\.grafSeparatorLine/.deletedGrafSeparatorLine/

g/^\.grafSeparatorLine/+1 s/^\s\+/.obeylinesSeparatorLine\r&/

g/^\.obeylinesSeparatorLine/-1 s/^\.grafSeparatorLine/.deletedGrafSeparatorLine/

g/^\.grafSeparatorLine/-1 s/^\s\+.*\$/&\r.obeylinesSeparatorLine/

g/^.obeylinesSeparatorLine/+1 s/^\.grafSeparatorLine/.deletedGrafSeparatorLine/

g/^\.deletedGrafSeparatorLine/d

%s/^.obeylinesSeparatorLine/.sp .1v\r.LP/

%s/^\.LP\$/.nr nextGrafWithoutIndent 0\r&/

"%s/^\.grafSeparatorLine\$/.ie \\\\n[nextGrafWithoutIndent] \\\\{\\\\\r.nr nextGrafWithoutIndent 0\r.LP\r.\\\\}\r.el .PP/

%s/^\.grafSeparatorLine\$/.p/

"g/^\.grafSeparatorLine/+1 s/^\s\+/.LP\r&/

"g/^\.grafSeparatorLine/-1 s/^\s\+.*/&\r.nr nextGrafWithoutIndent 1/

"

%s:^ÞtzpPreformattedTzp\.:\\\\\&.:

%s:^ÞtzpPreformattedTzp::

g/^ÞtzpBogusEndOfFileLineTzp/d

%s/ÞtzpThornTzp/Þ/g

if $loadtmac
  0r $tmacf
endif

0i
.mso ms.tmac
.de par*fp!0-no
.@PP
\&\\\\*[par@sup-start]\\\\\$1\\\\*[par@sup-end]\ \c
..
.nr FL \\n[LL]
.de JPEG
.mso jpeg.tmac
.JPEG \\\\\$*
..
.de TOC
.mso toc.tmac
.TOC
..
.de IX
.mso index.tmac
.IX \\\\\$*
..
.de TITLE
.RT
.LP
.ce 10
.B "\\\\\$*"
.sp 1ex
.ce
.nr nextGrafWithoutIndent 0
.LP
..
.de SEC
.if d WRITETOCLINE .WRITETOCLINE \\\\\$*
.@SH \\\\\$1
.shift
\\\\\$*
.LP
.nr nextGrafWithoutIndent 0
..
.de SECBREAK
.LP
.sp .7v
\\\\\$*
.sp .5v
.LP
.nr nextGrafWithoutIndent 0
..
.de p
.ie \\\\n[nextGrafWithoutIndent] \\{\\\\
.nr nextGrafWithoutIndent 0
.LP
.\\}
.el .PP
..
.if !'\\V[GROFF_FONT_FAM]'' .fam \\V[GROFF_FONT_FAM]
.if !'\\V[GROFF_FONT_BOLD]'' .ftr B \\V[GROFF_FONT_BOLD]
.if !'\\V[GROFF_FONT_MONO]'' .ftr C \\V[GROFF_FONT_MONO]
.

endfunc

call Txt2pdf()
w
EOF

groff -t $opts $h > $g.ps
#rm $h
ps2pdf $g.ps $g.pdf
rm $g.ps
